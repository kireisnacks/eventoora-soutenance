// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String?
  lastName String?
  email String? @unique
  emailVerified DateTime?
  phone String?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

  accounts Account[]
  spaces Space[]
  reservations Reservation []
  reviews Review[]
}

model Account {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.String
    access_token String? @db.String
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider , providerAccountId]) ///combinaison unique
}

model Space {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    description String
    mainImage String
    category String
    size Int
    city String
    address String
    postalCode String
    parkingDescription String //35C
    rules String //100C
    scard Boolean //Security Camera and recording devices
    minimumAge Int
    instructions String
    latitude Float?
    longitude Float?
    cancellationPolicy String
    price Int
    minimumHour Int
    instantBooking Boolean
    capacity Int

    status SpaceStatus @default(PENDING)
    adminComments String? // Commentaires optionnels de l'admin

    createdAt DateTime @default(now())

    userId String @db.ObjectId  

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    reservations Reservation []
    assets Asset[]
    operatingHours OperatingHours[]
    reviews Review[]
    activities Activity[]
    blockedSlots BlockedSlot[]
    gallery Gallery[]
}

enum SpaceStatus {
  PENDING
  APPROVED
  REJECTED
}

model Reservation {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    spaceId String @db.ObjectId
    startDateHour DateTime
    endDateHour DateTime
    totalPrice Int
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id] , onDelete: Cascade)
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Asset {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    category String
    createdAt DateTime @default(now())

    spaces Space[] //the space that has this asset
}

model OperatingHours{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    spaceId String
    dayOfWeek DayOfWeek
    isOpen Boolean
    openTime DateTime? @db.Time
    closeTime DateTime? @db.Time

    @@unique([spaceId, dayOfWeek])

    space Space @relation(fields: [spaceId],references: [id])
}

enum DayOfWeek {
  Lundi
  Mardi
  Mercredi
  Jeudi
  Vendredi
  Samedi 
  Dimanche
}

model Review {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    spaceId String
    userId String
    rating Int
    comment String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    space Space @relation(fields: [spaceId], references: [id])
    user User @relation(fields: [userId], references: [id])
}

/// The Activity model represents the types of activities that can be accommodated in a space.
model Activity {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId /// The unique identifier for the activity.
    mainCategory String   /// The main category of the activity (e.g., 'Meeting', 'Event', 'Media Production').
    subCategory  String   /// The subcategory of the activity (e.g., 'Team Meeting', 'Workshop', 'Photoshoot').
    name         String   /// The name of the activity.
    spaces       Space[]  /// The spaces that can accommodate this activity.
    createdAt    DateTime @default(now()) /// The timestamp when the activity was created.
    updatedAt    DateTime @updatedAt
}

/// The BlockedSlot model represents specific time slots that are blocked for a space.
model BlockedSlot {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId /// The unique identifier for the blocked slot.
    spaceId   String
    startTime DateTime /// The start time of the blocked slot.
    endTime   DateTime /// The end time of the blocked slot.
    motif     String
    createdAt DateTime  @default(now()) /// The timestamp when the blocked slot was created.
    updatedAt DateTime  @updatedAt

    space  Space  @relation(fields: [spaceId], references: [id]) /// The space that the blocked slot belongs to.
}

model Gallery{
    id        String   @id @default(auto()) @map("_id") @db.ObjectId 
    spaceId   String
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    space Space @relation(fields:[spaceId], references: [id])
}